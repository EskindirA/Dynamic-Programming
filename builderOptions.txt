// TypeScript interface for chart options
export interface ChartOptions {
  xAxis?: {
    min?: number;
    max?: number;
    interval?: number;
    name?: string;
  };
  yAxis?: {
    min?: number;
    max?: number;
    interval?: number;
    name?: string;
  };
  legend?: {
    top?: number;
    icon?: string;
    itemWidth?: number;
    itemHeight?: number;
  };
  tooltip?: {
    trigger?: string;
    axisPointer?: {
      type?: string;
    };
  };
  series?: {
    smooth?: number;
    lineWidth?: number;
    pointBorderWidth?: number;
    pointBorderColor?: string;
  };
  dataZoom?: {
    enabled?: boolean;
    type?: 'slider' | 'inside';
    xAxisIndex?: number;
    yAxisIndex?: number;
    start?: number;
    end?: number;
  };
}

// Default options
export const defaultChartOptions: ChartOptions = {
  xAxis: {
    min: 2,
    max: 100,
    interval: 2,
    name: 'Time of the monitor run'
  },
  yAxis: {
    min: 0,
    max: 10,
    interval: 1,
    name: 'Resource usage in %'
  },
  legend: {
    top: 20,
    icon: 'rect',
    itemWidth: 12,
    itemHeight: 8
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross'
    }
  },
  series: {
    smooth: 0.3,
    lineWidth: 3,
    pointBorderWidth: 2,
    pointBorderColor: '#fff'
  },
  dataZoom: {
    enabled: true,
    type: 'slider',
    xAxisIndex: 0,
    yAxisIndex: 0,
    start: 0,
    end: 100
  }
};

// Interface for chart data
export interface ChartDataPoint {
  x: number;
  y: number;
}

export interface ChartDataset {
  name: string;
  data: ChartDataPoint[];
  color?: string; // Made optional
}

// Predefined color palette for dynamic datasets
const colorPalette = [
  '#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de',
  '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc', '#ff9f7f',
  '#ff7875', '#95de64', '#ffc53d', '#ff4d4f', '#40a9ff',
  '#9254de', '#b37feb', '#ff85c0', '#ffadd2', '#d3adf7'
];

// Function to generate colors for datasets
export function generateColorsForDatasets(datasets: ChartDataset[]): ChartDataset[] {
  return datasets.map((dataset, index) => ({
    ...dataset,
    color: dataset.color || colorPalette[index % colorPalette.length]
  }));
}

// Function to build complete chart options
export function buildChartOptions(
  datasets: ChartDataset[], 
  options: ChartOptions = {}
) {
  // Generate colors for datasets that don't have them
  const datasetsWithColors = generateColorsForDatasets(datasets);
  
  // Merge default options with provided options
  const mergedOptions = {
    xAxis: { ...defaultChartOptions.xAxis, ...options.xAxis },
    yAxis: { ...defaultChartOptions.yAxis, ...options.yAxis },
    legend: { ...defaultChartOptions.legend, ...options.legend },
    tooltip: { 
      ...defaultChartOptions.tooltip, 
      ...options.tooltip,
      axisPointer: { 
        ...defaultChartOptions.tooltip?.axisPointer, 
        ...options.tooltip?.axisPointer 
      }
    },
    series: { ...defaultChartOptions.series, ...options.series },
    dataZoom: { ...defaultChartOptions.dataZoom, ...options.dataZoom }
  };

  return {
    legend: {
      data: datasetsWithColors.map(dataset => dataset.name),
      top: mergedOptions.legend.top,
      textStyle: {
        color: '#333'
      },
      icon: mergedOptions.legend.icon,
      itemWidth: mergedOptions.legend.itemWidth,
      itemHeight: mergedOptions.legend.itemHeight,
      selected: datasetsWithColors.reduce((acc, dataset, index) => {
        acc[dataset.name] = index === 0; // First dataset is active by default
        return acc;
      }, {} as Record<string, boolean>)
    },
    tooltip: {
      trigger: mergedOptions.tooltip.trigger,
      axisPointer: {
        type: mergedOptions.tooltip.axisPointer?.type
      }
    },
    xAxis: {
      type: 'value',
      min: mergedOptions.xAxis.min,
      max: mergedOptions.xAxis.max,
      interval: 10, // Larger interval to prevent overlap
      name: mergedOptions.xAxis.name,
      nameLocation: 'middle',
      nameGap: 35,
      nameTextStyle: {
        color: '#333',
        fontSize: 14
      },
      axisLine: {
        lineStyle: {
          color: '#333'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#333'
        }
      },
      axisLabel: {
        formatter: (value: number) => Math.round(value).toString(),
        interval: 0,
        showMaxLabel: true,
        showMinLabel: true,
        color: '#333'
      },
      splitLine: {
        show: false
      }
    },
    yAxis: {
      type: 'value',
      min: mergedOptions.yAxis.min,
      max: mergedOptions.yAxis.max,
      interval: mergedOptions.yAxis.interval,
      name: mergedOptions.yAxis.name,
      nameLocation: 'middle',
      nameGap: 50,
      nameTextStyle: {
        color: '#333',
        fontSize: 14
      },
      axisLine: {
        lineStyle: {
          color: '#333'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#333'
        }
      },
      axisLabel: {
        formatter: (value: number) => Math.round(value).toString(),
        color: '#333'
      },
      splitLine: {
        show: false
      }
    },
    dataZoom: mergedOptions.dataZoom.enabled ? [
      // Mouse wheel zoom (inside)
      {
        type: 'inside',
        xAxisIndex: mergedOptions.dataZoom.xAxisIndex,
        yAxisIndex: mergedOptions.dataZoom.yAxisIndex,
        start: mergedOptions.dataZoom.start,
        end: mergedOptions.dataZoom.end,
        zoomOnMouseWheel: true,
        moveOnMouseMove: true,
        moveOnMouseWheel: false,
        preventDefaultMouseMove: true
      }
    ] : [],
    series: datasetsWithColors.map(dataset => ({
      name: dataset.name,
      type: 'line' as const,
      data: dataset.data.map(point => [point.x, point.y]),
      smooth: mergedOptions.series.smooth,
      lineStyle: {
        color: dataset.color,
        width: mergedOptions.series.lineWidth
      },
      itemStyle: {
        color: dataset.color,
        borderWidth: mergedOptions.series.pointBorderWidth,
        borderColor: mergedOptions.series.pointBorderColor
      },
      areaStyle: {
        color: 'transparent'
      }
    }))
  };
}
